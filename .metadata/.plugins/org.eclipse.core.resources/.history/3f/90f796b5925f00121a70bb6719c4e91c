package server.clientCompiler;

import java.util.List;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.Arrays;

import javax.tools.JavaCompiler;
import javax.tools.JavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;

public class CompilerServer extends UnicastRemoteObject implements
		CompilerRemote {
	/**
	 * 
	 */
	private static final long serialVersionUID = -3977795739592902008L;
	String serverIp;
	String port;

	public CompilerServer(String serverIp, String port) throws RemoteException {
		this.serverIp = serverIp;
		this.port = port;
	}

	@Override
	public String compileAndJar(String userName, String macAddress)
			throws RemoteException {
		try {
			System.out.print("Step 1: Creating source file - ");
			File dir = new File("/home/aakash/workspace/Squid-client/test");
			File sourceFile = new File(dir, "ClientReferenceFile.java");
			File clientFile = new File(dir, "Client.java");
			String line = "";
			BufferedReader br = new BufferedReader(new FileReader(sourceFile));
			PrintWriter writer = new PrintWriter(clientFile);
			while ((line = br.readLine()) != null) {
				if (line.indexOf("aakashgarg") >= 0) {
					line = line.replace("aakashgarg", userName);
				} else if (line.indexOf("78-DD-08-C9-94-3A") >= 0) {
					line = line.replace("78-DD-08-C9-94-3A", macAddress);
				}
				writer.println(line);
			}
			br.close();
			writer.flush();
			writer.close();
			System.out.println("done");
			// compileAndJar(userName);
			createJar(userName, dir);
			// System.out
			// .println("Step 4: Deleting File - " + clientFile.delete());
			System.out.println("jar created for user:" + userName
					+ " with mac id: " + macAddress);
			return serverIp + ":" + port;
		} catch (Exception e) {
			return null;
		}
	}

	private synchronized static void createJar(String userName, File dir)
			throws IOException, InterruptedException {
		System.out.print("Step 2: Compiling file - ");
		/*
		 * p = Runtime.getRuntime().exec( "sudo javac -d " + dir.getPath() +
		 * "/ " + dir.getPath() + "/Client.java"); p.waitFor();
		 */
		compileClass(dir);
		System.out.println(new File(dir, "client/Client.class").exists());
		System.out.print("Step 3: Creating jar - ");
		Process p = null;
		System.out.println(dir.getPath());
		p = Runtime.getRuntime().exec("sudo cd " + dir.getPath());
		p.waitFor();
		p = Runtime.getRuntime().exec(
				"sudo jar -cvmf manifest.txt " + userName
						+ ".jar client ipMac net server");
		p.waitFor();
		System.out.println(new File(dir, userName + ".jar").exists());
	}

	private synchronized static void compileClass(File dir) throws IOException {
		// String rootPath = "/home/aakash/workspace/Squid-client/test/";
		String rootPath = dir.getPath()+"/";
		String classpath = rootPath;
		System.out.println("--> dest Path " + rootPath);
		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
		List<String> optionList = new ArrayList<String>();
		optionList.addAll(Arrays.asList("-classpath", classpath));
		optionList.addAll(Arrays.asList("-d", rootPath));
		StandardJavaFileManager sjfm = compiler.getStandardFileManager(null,
				null, null);
		File[] files = { new File(rootPath + "Client.java") };
		Iterable<? extends JavaFileObject> fileObjects = sjfm
				.getJavaFileObjects(files);
		JavaCompiler.CompilationTask task = compiler.getTask(null, null, null,
				optionList, null, fileObjects);
		task.call();
		sjfm.close();
	}

	@SuppressWarnings("unused")
	private synchronized static void compileAndJar(String userName)
			throws IOException, InterruptedException {
		Process p = null;
		p = Runtime.getRuntime().exec(
				"sudo /home/aakash/Desktop/SquidRMI/classes/CompileAndJar "
						+ userName);
		p.waitFor();
	}

}
